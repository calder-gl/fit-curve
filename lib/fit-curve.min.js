/*
  JavaScript implementation of
  Algorithm for Automatically Fitting Digitized Curves
  by Philip J. Schneider
  "Graphics Gems", Academic Press, 1990

  The MIT License (MIT)

  https://github.com/soswow/fit-curves
*/
(function(y,v){if("function"===typeof define&&define.amd)define(["module"],v);else if("undefined"!==typeof exports)v(module);else{var w={exports:{}};v(w);y.fitCurve=w.exports}})(this,function(y){function v(a,c){if(!(a instanceof c))throw new TypeError("Cannot call a class as a function");}function w(a,c,b,f,e,q){var k;if(2===a.length){f=d.vectorLen(d.subtract(a[0],a[1]))/3;var g=[a[0],d.addArrays(a[0],d.mulItems(c,f)),d.addArrays(a[1],d.mulItems(b,f)),a[1]];return[g]}var p=A(a);var l=z(a,p,p,c,b,
e);g=l[0];var m=l[1];l=l[2];if(m<f)return[g];if(m<f*f){var r=p;var t=m;var h=l;for(k=0;20>k;k++){r=B(g,a,r);l=z(a,p,r,c,b,e);g=l[0];m=l[1];l=l[2];if(m<f)return[g];if(l===h&&(t=m/t,.9999<t&&1.0001>t))break;t=m;h=l}}if(q)return[g];q=[];g=d.subtract(a[l-1],a[l+1]);0===g[0]&&0===g[1]&&(g=d.subtract(a[l-1],a[l]),p=[-g[1],g[0]],g[0]=p[0],g[1]=p[1]);g=d.normalize(g);p=d.mulItems(g,-1);q=q.concat(w(a.slice(0,l+1),c,g,f,e));return q=q.concat(w(a.slice(l),p,b,f,e))}function z(a,c,b,f,e,q){var k,g=a[0],p=a[a.length-
1];var l=[g,null,null,p];var m=d.zeros_Xx2x2(b.length);var r=0;for(k=b.length;r<k;r++){var t=b[r];var h=1-t;var u=m[r];u[0]=d.mulItems(f,3*t*h*h);u[1]=d.mulItems(e,3*h*t*t)}h=[[0,0],[0,0]];var n=[0,0];r=0;for(k=a.length;r<k;r++)t=b[r],u=m[r],h[0][0]+=d.dot(u[0],u[0]),h[0][1]+=d.dot(u[0],u[1]),h[1][0]+=d.dot(u[0],u[1]),h[1][1]+=d.dot(u[1],u[1]),t=d.subtract(a[r],x.q([g,g,p,p],t)),n[0]+=d.dot(u[0],t),n[1]+=d.dot(u[1],t);b=h[0][0]*h[1][1]-h[1][0]*h[0][1];m=h[0][0]*n[1]-h[1][0]*n[0];h=n[0]*h[1][1]-n[1]*
h[0][1];h=0===b?0:h/b;n=0===b?0:m/b;m=d.vectorLen(d.subtract(g,p));b=1E-6*m;h<b||n<b?(l[1]=d.addArrays(g,d.mulItems(f,m/3)),l[2]=d.addArrays(p,d.mulItems(e,m/3))):(l[1]=d.addArrays(g,d.mulItems(f,h)),l[2]=d.addArrays(p,d.mulItems(e,n)));f=0;e=a.length/2;h=C(l,10);g=0;for(p=a.length;g<p;g++){n=a[g];m=void 0;b=c[g];if(0>b)b=0;else if(1<b)b=1;else{for(k=1;10>=k;k++)if(b<=h[k]){m=(k-1)/10;u=k/10;r=h[k-1];k=h[k];m=(b-r)/(k-r)*(u-m)+m;break}b=m}n=d.subtract(x.q(l,b),n);n=n[0]*n[0]+n[1]*n[1];n>f&&(f=n,e=
g)}e=[f,e];f=e[0];e=e[1];q&&q({bez:l,points:a,params:c,maxErr:f,maxPoint:e});return[l,f,e]}function B(a,c,b){return b.map(function(b,e){e=c[e];var f=d.subtract(x.q(a,b),e),k=x.qprime(a,b);e=d.mulMatrix(f,k);f=d.sum(d.squareItems(k))+2*d.mulMatrix(f,x.qprimeprime(a,b));return 0===f?b:b-e/f})}function A(a){var c=[],b,f,e;a.forEach(function(a,k){b=k?f+d.vectorLen(d.subtract(a,e)):0;c.push(b);f=b;e=a});return c=c.map(function(b){return b/f})}var C=function(a,c){for(var b,f=[0],e=a[0],q=0,k=1;k<=c;k++)b=
x.q(a,k/c),q+=d.vectorLen(d.subtract(b,e)),f.push(q),e=b;return f=f.map(function(b){return b/q})},d=function(){function a(){v(this,a)}a.zeros_Xx2x2=function(c){for(var b=[];c--;)b.push([0,0]);return b};a.mulItems=function(c,b){return[c[0]*b,c[1]*b]};a.mulMatrix=function(c,b){return c[0]*b[0]+c[1]*b[1]};a.subtract=function(c,b){return[c[0]-b[0],c[1]-b[1]]};a.addArrays=function(c,b){return[c[0]+b[0],c[1]+b[1]]};a.addItems=function(c,b){return[c[0]+b,c[1]+b]};a.sum=function(c){return c.reduce(function(b,
c){return b+c})};a.dot=function(c,b){return a.mulMatrix(c,b)};a.vectorLen=function(c){var b=c[0];c=c[1];return Math.sqrt(b*b+c*c)};a.divItems=function(c,b){return[c[0]/b,c[1]/b]};a.squareItems=function(c){var b=c[0];c=c[1];return[b*b,c*c]};a.normalize=function(c){return this.divItems(c,this.vectorLen(c))};return a}(),x=function(){function a(){v(this,a)}a.q=function(c,b){var a=1-b,e=d.mulItems(c[0],a*a*a),q=d.mulItems(c[1],3*a*a*b);a=d.mulItems(c[2],3*a*b*b);c=d.mulItems(c[3],b*b*b);return d.addArrays(d.addArrays(e,
q),d.addArrays(a,c))};a.qprime=function(a,b){var c=1-b,e=d.mulItems(d.subtract(a[1],a[0]),3*c*c);c=d.mulItems(d.subtract(a[2],a[1]),6*c*b);a=d.mulItems(d.subtract(a[3],a[2]),3*b*b);return d.addArrays(d.addArrays(e,c),a)};a.qprimeprime=function(a,b){return d.addArrays(d.mulItems(d.addArrays(d.subtract(a[2],d.mulItems(a[1],2)),a[0]),6*(1-b)),d.mulItems(d.addArrays(d.subtract(a[3],d.mulItems(a[2],2)),a[1]),6*b))};return a}();y.exports={fitCurve:function(a,c,b,f){if(!Array.isArray(a))throw new TypeError("First argument should be an array");
a.forEach(function(a){if(!Array.isArray(a)||2!==a.length||"number"!==typeof a[0]||"number"!==typeof a[1])throw Error("Each point should be an array of two numbers");});a=a.filter(function(b,c){return 0===c||!(b[0]===a[c-1][0]&&b[1]===a[c-1][1])});if(2>a.length)return[];var e=a.length,q=d.normalize(d.subtract(a[1],a[0]));e=d.normalize(d.subtract(a[e-2],a[e-1]));return w(a,q,e,c,b,f)}}});
